// this page's HTML template with the [hash] cache-buster
// and the only stylesheet
require('./index.scss');
require('./index.src.html');

//
// begin JavaScript code
// AngularJS with a conjtroller in ES2015 class syntax
// and a pinch of jQuery for date pickers
//

// JS's Date objects are weak: only way to get YYYY-MM-DD string is to use toISOFormat() which fudges the time zone...
Date.prototype.YMD = function () {
    const y = 1900 + this.getYear();
    const m = 1 + this.getMonth();
    const d = this.getDate();
    return `${y}-${m >= 10 ? m : '0'+m}-${d}`;
};

// map JS Date weekday (0-6, 0=Sunday) to match our table values (Sun, Wed, Fri, etc)
const WEEKDAYS_LOOKUP = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', ];

// API key for Airtable
// USE A READ-ONLY USER because this could become visible to anyone who views the source
const AIRTABLE_API_KEY = "keymXIGCYEoPy4vib";

// the URL of the table
// which includes the account hash and URL-encoded table name
const AIRTABLE_SEARCH_URL = "https://api.airtable.com/v0/appv6KlqHiaOSlrcQ/All%20Services";

// the list of services offered for selection
// this MUST match the domain values in the Airtable
// DANGER! Airtable uses substring matching so one could get false matches,
// e.g. Health and Mental Health would both match "Health", and there would be no way to fetch only Health records (maybe some postprocessing?)
// so just don't do it! use distinct-enough values that substrings won't match
// sorry but that's the degree of Airtable's support for multiple-choice values
const SERVICES_OFFERED = [
    "Case Management",
    "Clothing/Blankets/Sleeping Bags",
    "Computer Access",
    "Drop In",
    "Food",
    "Health Care",
    "Housing",
    "Hygiene",
    "Legal",
    "Mail",
    "Mental Health",
    "Phone",
    "Referrals",
    "Restroom",
    "Substance Abuse",
];

// the controller class and then launch
class PageController {
    // match this argument list to the $inject list provided below... or weird things will happen
    constructor($scope, $http) {
        // injections we want to pass into other methods (sigh)
        this.$http = $http;
        this.$scope = $scope;

        // cache some dates used for calendar date picker and date buttons
        // used for a minimum date allowed, as well as "is the selected date tomorrow?"
        this.today = new Date();

        this.tomorrow = new Date();
        this.tomorrow.setDate(this.tomorrow.getDate() + 1);

        // initial search-and-results state
        this.search = {
            // search params: date and services
            services: [],
            date: null,
            // search results and having in fact ever performed a search
            results: [],
            done: false,
        };
        // application state stuff
        this.busy    = false;       // are we busy?
        this.showmap = false;       // should we be showing results the map? if not, then the list

        // assign some constants into scope so we can use them to build the UI
        this.services_list = SERVICES_OFFERED;
    }

    openDatePicker () {
        $('#modal_datepicker').modal('show');
    }
    closeDatePicker () {
        $('#modal_datepicker').modal('hide');
    }
    pickDate (which) {
        // accepts a named day (today or tomorrow) or "date" to pick one
        switch (which) {
            case 'today':
                this.search.date = this.today;
                break;
            case 'tomorrow':
                this.search.date = this.tomorrow;
                break;
            case 'date':
                this.openDatePicker(); // has a change handler which will set search.date
                break;
            case 'clear':
                this.search.date = null;
                break;
        }
    }

    performSearch () {
        // check required
        if (! this.search.services.length) return alert("Select the help you are trying to find.");
        if (! this.search.date) return alert("Select a date.");

        // compose the filter formula
        // the syntax is weird, and the documentation is quite poor, but here's a start...
        // https://support.airtable.com/hc/en-us/articles/203255215-Formula-Field-Reference
        // super brief overviews of some gotchas:
        // * syntax for a giant and is: AND( clause1, clause2, clause3, ...)
        // * field names with spaces should be wrapped in {}
        // * there is no IN operator for arrays, just substring matching; see the note in SERVICES_OFFERED about overlapping substrings
        let formula = [];

        const weekday = WEEKDAYS_LOOKUP[this.search.date.getDay()];
        formula.push(`FIND("${weekday}", Day) > 0`);

        this.search.services.forEach(function (wanted) {
            formula.push(`FIND("${wanted}", {Services Offered}) > 0`);
        });

        formula = `AND(${formula.join(", ")})`;

        // compose the query and send it off
        var params = {
            filterByFormula: formula,
        };

        this.busy = true;
        this.$http({
            method: 'GET',
            url: AIRTABLE_SEARCH_URL,
            params: params,
            headers: {
                "Authorization": `Bearer ${AIRTABLE_API_KEY}`
            },
        })
        .then(
            (response) => {
                this.busy = false;
                this.search.results = response.data.records.map(item => { return item.fields; });
                this.search.done = true;
            },
            (error) => {
                this.busy = false;
                alert("Could not connect to the site. Check your connection and try again.");
            }
        );
    }

    searchBack () {
        // empty our results and done flag so we go back to the search panel
        // but don't modify their search parameters
        this.search.done = false;
        this.search.results = [];
    }
}

PageController.$inject = [ '$scope', '$http' ];

angular.module('app', [
    'checklist-model',
    'ui.bootstrap',
])
.controller('PageController', PageController);
